<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Tech Interview Handbook Blog</title>
        <link>https://techinterviewhandbook.org/blog</link>
        <description>Tech Interview Handbook Blog</description>
        <lastBuildDate>Sat, 30 Oct 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[My Experience Working as a Meta (previously Facebook) Engineer]]></title>
            <link>https://techinterviewhandbook.org/blog/my-experience-working-as-a-meta-facebook-engineer</link>
            <guid>my-experience-working-as-a-meta-facebook-engineer</guid>
            <pubDate>Sat, 30 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[A number of the folks I referred have completed their interviews and are in the midst of deciding which company's offer to accept for their internship/full-time roles. Hence I figured it might be a good time to write about my experience at Meta (previously Facebook) so far as it could be helpful in helping some of them make their first important career decision!]]></description>
            <content:encoded><![CDATA[<p>A number of the folks I referred have completed their interviews and are in the midst of deciding which company&#x27;s offer to accept for their internship/full-time roles. Hence I figured it might be a good time to write about my experience at Meta (previously Facebook) so far as it could be helpful in helping some of them make their first important career decision!</p><p><img src="/img/meta-facebook.jpg" alt="Meta logo"/></p><h2>Products</h2><p>Meta is a huge company and has teams working on all sorts of products. For big tech companies, common products include ads networks, chat, enterprise offerings, video watching, payments, hardware products, industry-leading AI tools, internal tools, etc. the other big tech companies Microsoft, Amazon, Apple and ByteDance have products in some of these areas as well. For many big companies, they are large enough that they build their our own infra and internal tools for most technologies they use because most existing technologies on the market can&#x27;t meet their scale. Hence, not only will you get the chance to work on consumer products, you might also get to work on some of the lower level infrastructure work that is used by your fellow software engineers - our internal database systems, our internal Docker, our open source projects like React, React Native, GraphQL, PyTorch, Docusaurus, etc.</p><p>The impact is huge - every line of code you write has the potential to impact millions (sometimes even billions) of users due to the widespread nature of Meta&#x27;s products. There was an intern who on their second day of work, changed the placeholder text of facebook.com&#x27;s search bar by accident to &quot;Hi I&#x27;m a Search Bar!&quot; as part of a ramp up task and it was shipped to public for a brief moment before the change got reverted. With great power comes great responsibility!</p><h3>Teams in Meta Singapore</h3><p>Let&#x27;s talk about some of the teams in Meta Singapore since I currently work in Singapore and many of the readers are based in Singapore.</p><p>In Meta SG we have two huge organizations - Commerce Engineering and Ads &amp; Business Growth. Both organizations, like most organizations in Meta, have global impact where the number of users are in the order of millions or more.</p><p>Commerce Engineering (hardware sales) is Meta&#x27;s next up and coming revenue stream and is also the team I work in. Commerce Engineering primarily deals with sale of Meta&#x27;s hardware devices, from discovery to purchase to warranties, returns and support. If you heard of the Oculus Quest device, which is Meta&#x27;s flagship VR device, my team is in-charge of building the web storefronts to sell them (currently <a href="https://www.oculus.com">https://www.oculus.com</a>). In my team, I built the web infrastructure for the Oculus website which tens of other Oculus teams build on top of, built the React components for the web version of the Oculus Design System and also rearchitected the Content Management Platform to be compatible with React. It&#x27;s definitely one of the highlights of my career to be building a product that contributed to Meta&#x27;s 2nd highest revenue stream (and still growing)!</p><p>On the Ads and Business side, there are multiple teams:</p><ul><li>Business Integrity Review - They work on building tools to catch bad advertisers (advertisers who create ads which violate our policies). They want to maximize Business Integrity outcomes by building a human review system for ads &amp; commerce on Meta, driving end-to-end improvements in the workflows, and providing best-in-class tools to IP rights holders, etc.</li><li>Business Support Platform - They redefine the support experience across all Meta business products, making it available, effective and effortless for all businesses. They make sure businesses can identify the help resources available to them when they need assistance in accomplishing their goals across Meta&#x27;s suite of business tools. Their tools will also effortlessly help marketers diagnose their issues and connect them to the best solution to solve their problem. They have also some investment into the machine learning space.</li><li>Small Businesses and Growth - They have Multiple sub-projects. There&#x27;s a system for managing the delivery of communications to businesses, advertisers and creators across Meta&#x27;s products. The system is used by hundreds of internal teams, manages few hundred million communications a day and supports delivery to hundred over channels on Facebook, Instagram, Email, Push notifications and out-of-app surfaces such as Ads Manager, Meta Business Suite, Commerce Manager, etc. There&#x27;s also a team working on adding an appointment booking system and restaurant menus to relevant businesses on Meta.</li></ul><h2>Career Progression/Compensation</h2><p>Meta is one of the best companies for ambitious people who want to grow their careers quickly. At Meta, promotions come sooner and we encourage employees to be at their top form. At Meta, our terminal level (level at which there is no pressure to promote) is E5 and most people get from E3 to E4 within 1-1.5 years and from E4 to E5 within 2-2.5 years (this is a pessimistic estimate, I&#x27;ve seen people go from E3 to E5 in under 2 years). As an E5 in Meta SG your annual compensation will be at least 300k annually, which is on par, if not higher than most director-level roles in non-tech industries in SG. Imagine getting to that level of pay within 5 years of your career!</p><p>For comparison, Google, which is a similar company to Meta in many ways, has a slower promotion cycle - the average engineer at Google takes more than 2 years to get from L3 to L4, more than 3 years to get from L4 to L5 and more than 4 years to get from L5 to L6. At Google the terminal level is L4 so there&#x27;s no pressure to promote. None of my peers are L6 at Google but a few are already E6 at Meta and it is quite achievable.</p><p>Faster promotions also lead to better pay, so in most cases, Meta pays more than most other companies. Meta is one of the top companies in terms of reputation and prestige especially for engineers.</p><h2>Company Prospects</h2><p>Meta is a tech giant products have over 3 billion active monthly users and Meta relies on ads as their primary source of revenue. Whether you like it or not, Meta products are around to stay for the next couple of years. Even if they are going to die off, it won&#x27;t be that soon. Stock growth has been relatively strong over the past few years (doubled since I joined in Nov 2017), especially since 2020.</p><p>Mark Zuckerberg is also betting on the <a href="https://about.fb.com/news/2021/10/founders-letter/">metaverse</a>. Personally I&#x27;m undecided on whether the metaverse is the future.</p><h2>Culture</h2><p>There&#x27;s so much to say about a company&#x27;s culture, but hopefully you can infer some things about the company culture from the stuff I wrote above. Since I am an engineer, I will speak more about the engineering aspects of Meta&#x27;s culture.</p><ul><li>Done is better than perfect - At Meta we have a quote &quot;Done is better than perfect&quot;. Shipping something into the hands of users is more important than having perfect engineering. Teams get to decide how they want to build their products, whether to focus on getting MVPs out first and then iterating and improving the engineering later on, however they want.</li><li>Bootcamp - Many engineers at Meta aren&#x27;t assigned a team before they start at the company. They have to go through this program called Bootcamp, which is a crash course to teach them the useful tools and practices and also match them to their future team. Bootcampers work on Bootcamp tasks, which are small tasks created by various teams across Meta to get acquainted with the tech stack, development flow, and also the various products Meta has to offer. Few weeks into the Bootcamp program, bootcampers start chatting with managers of teams and can choose to work with teams which interest them. Bootcamp ends with the bootcamper decides on a team to join. Bootcamp is a great way for new employees to find teams which interest them the most and lowers the risk of them joining a team that aren&#x27;t a good fit for them.</li><li>Development efficiency - There are tens of thousands of Software Engineers at Meta, hence we have teams specializing in making the developer experience extremely efficient for us. The default IDE for us is a customized version of VS Code with a ton of useful internal plugins. Engineers can each get a remote server to do development on, which contains the latest code and development environment set up - we can start coding right away without having to figure out how to update dependencies and set up the necessary environment.</li><li>Bottom-up culture - Engineers at Meta get a lot of say regarding the roadmap and wear multiple hats - project roadmapping, project management, data analysis, prototyping, etc on top of the core coding expectations. I&#x27;m personally heavily involved in the roadmapping process for my team as my team has a heavier focus on engineering - we build tools for the other product teams within Commerce Engineering to use.</li><li>Hackathons - Hackathons have been an integral part of Meta&#x27;s culture since it started and many successful products were born out of hackathons. Hackathons are a great way to encourage innovation and promote collaboration between engineers, designers, product managers, etc. In the past, the most successful hackathon projects get shipped - Like button, Facebook timeline, comments tagging. These days, due to the maturity and scale of the company, shipping hackathon projects to the public is rarer but our hackathon culture is still going strong. In a recent hackathon, me and two others built a Kudoboard replacement to solve a problem faced by managers where they had to resort to external services in order to sign group cards to send well wishes to coworkers (farewell/celebrating work anniversaries). We took a weekend to build an initial version of a tool we uncreatively call &quot;Boards&quot;, spent the next week or so integrating with internal features like commenting, reactions, GIFs and announced about it in a company-wide group. The response was very encouraging - it has gained significant traction within the company - over 2000 boards and 20000 messages have been written since it was launched in Aug 2021! As a bonus, we&#x27;ll be getting credit for it in our performance review :)</li><li>Building cool internal tools - At Meta scale, it sometimes make sense for us to build our own internal tooling that has tight integration with our internal ecosystem as opposed to using an external service which might incur significant expenses and also pose security risks. We have teams building and maintaining our own tasks tool, code browsing and reviewing tool, a Q&amp;A tool similar to Stack Overflow, a customized version of VS Code, an interview question bank, interview feedback tool, data visualization and querying tool, and a workflow automation tool similar to IFTTT/Zapier! Someone built a Pokedex app where you can catch a random Pokemon every time you close a task (I&#x27;m at 807/899 now!). I also have to mention that we have an internal meme maker which we can use to add customized internal memes to use in our comments in diff reviews and group posts</li><li>Code wins arguments - It&#x27;s not gender, race or your background that wins debates, it&#x27;s the work that you produce. Instead of spending time arguing over technical decisions, it is more convincing to write some code to demonstrate the point.</li><li>Beyond coding - We are also expected to contribute to the company beyond our coding, as in our perf evaluation we have a People axis, which measures how much you help and grow the people around you. People give talks, organize events, summits, do interviews, to score in this axis.</li><li>Fun Social Groups - Workplace is Meta&#x27;s enterprise offering, it&#x27;s essentially Facebook for companies. We have various interest groups where we can find colleagues to play board games, share cat photos, memes when we want to procrastinate on writing performance reviews, interesting puns, investing tips, and more!</li></ul><h2>Mentorship and Growth</h2><p>Mentorship is readily available at Meta all the way from interns to senior executives. One thing that stood out to me when I first joined Meta was the focus on mentorship. When I first joined the company and was in the Bootcamp program, I had a Bootcamp mentor. After joining a team, I was assigned a senior engineer as my mentor who was also my tech lead. Employees will have weekly 1:1s with their mentor and manager. For interns, each intern at Meta is assigned an intern manager, who will act as their mentor and is usually the person who came up with their internship project. The intern manager will be the main person evaluating the intern&#x27;s work and they ultimately determine the intern&#x27;s performance and if they receive a return offer at the end of their internship.</p><p>These days, as a tech lead myself, I have around 4 1:1s weekly with mentees and 2 with managers. I&#x27;m able to chat with my mentees and mentors about anything - it doesn&#x27;t have to be about work. I often give my mentees feedback on how they are doing, advice and ideas on how they can be more successful, talk about the things I&#x27;m working on and why I made certain decisions.</p><p>There are also specialized mentorship programs for those who need it, technical mentorship, career growth mentorship, managerial role transition mentorship, etc.</p><h2>Work-Life Balance</h2><p>At Meta, you get to choose how fast you want to accelerate your career. Some people choose to take up more responsibilities, work more and ship more impact, usually resulting in faster professional growth, higher ratings and pay, while others work at their own comfortable pace; it&#x27;s really up to the individual. The top performer on my team now is nearly getting to E5 with just around 2 years of working experience. They don&#x27;t work beyond working hours, they&#x27;re doing well because they&#x27;re working smart and working on the most impactful and challenging problems.</p><p>Every Meta employee has 21 days of leave/paid time off every year and this year the company gave everyone three company-wide paid holidays on Friday in the summer and also two Meta choice days - effectively more paid time off but they cannot be accrued.</p><h2>Transfers and Mobility</h2><p>It is extremely easy to move around in Meta because Meta understands that mobility is important to the happiness and welfare of employees. People move around quite often and people are eligible to consider team changes from their second year at the company onwards. Meta is a large company comprising of many organizations and each organization has their own unique culture. It can be refreshing to move to another part of the company, working on different domains, different products, experiencing a slightly different engineering culture, yet still be productive because you are using the same engineering tools as before. When engineers move around the company, positive things can happen - they bring the good practices from their previous organizations to the new organizations, networks are strengthened and new connections are formed. Because Meta has offices around the globe, it is also possible to transfer to different countries as long as there are no work authorization issues. Personally I relocated back to Meta Singapore office after working for 2 years in Meta Menlo Park and my manager has worked in <strong>4 different offices</strong> (Menlo Park, London, New York, Singapore) throughout her 9 years at Meta!</p><p>For engineers, there are also temporary transfers which we call Hackamonths. Hackamonths are month-long projects proposed by teams where they welcome someone outside their team to work on. At the end of the hackamonth, the participating engineer could return back to their original team or stay on the new team. This provides engineers with the opportunity to try out work and the culture of their new teams before committing to a permanent move.</p><h2>What I dislike about Meta</h2><ul><li>Imposter syndrome - The company is full of the smartest people in the world. There are many days I feel that the people around me are smarter than me and that I might not belong here.</li><li>Launch processes - With the company undergoing tons of scrutiny these days, we have to be even more careful around how we use our users&#x27; data and what we are tracking. Every public launch now has to undergo a review process with legal and security.</li><li>Cross-timezone collaboration - My team frequently works with product managers, designers and other roles who are based in California. Meetings with these folks tend to be in the morning (their evening) and it can be hard to get up in the morning sometimes...</li><li>Fewer low hanging fruits - In a mature company especially if you are working on mature products, sometimes the low hanging fruits have been snapped up and you mostly are left with really tough problems to solve. On the bright side, Meta engineers should be smart and should be able to live up to those challenges.</li><li>Legacy code - Unless you&#x27;re working on a new product, you inevitably will have to be deal with code others have written. The older the product you work on, the more legacy code you have to deal with and the code quality varies.</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A Glimpse into Front End Interviews]]></title>
            <link>https://techinterviewhandbook.org/blog/a-glimpse-into-front-end-interviews</link>
            <guid>a-glimpse-into-front-end-interviews</guid>
            <pubDate>Mon, 30 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[A glimpse into the front end interview process and questions that frequently come up.]]></description>
            <content:encoded><![CDATA[<head><link rel="canonical" href="https://lik.ai/blog/my-experience-with-front-end-interviews"/></head><p>A glimpse into the front end interview process and questions that frequently come up.</p><h2>Interview Process</h2><p>Applying for front end engineer roles is very similar to software engineer roles, but the interviews can be quite different. In my experience, for each company, there tend to be between 3 to 4 sessions. Most of them will be testing on JavaScript and discussion around web development technologies, and the rest on algorithms or behavioral.</p><p>One aspect that I have found interesting is that the younger the company, the more questions will lean towards JavaScript. This could be because hiring specifically for front end engineers is relatively new. Older companies used to only hire software engineers without regard if their focus is on the back end or front end.</p><h2>JavaScript Rounds</h2><p>JavaScript is the main focus among all the companies I have interviewed with. It makes sense as front end work nowadays is very JavaScript-heavy. HTML and CSS knowledge is no longer a necessity thanks to component libraries and the likes.</p><h3>JavaScript Minutiae</h3><p>To qualify for some companies, you might need to brush up on the minutiae of JavaScript. Topics like variable hoisting, holey arrays, non-strict mode, and switch case fall through came up. While I do not feel that knowing such things determine who is a better engineer, it is what it is. Here is my <a href="https://repl.it/@li_kai/JavaScript-Cheatsheet">JavaScript cheat sheet</a>.</p><h3>JavaScript Topics</h3><p>After the first assessment, live interviews tend to test on more advanced JavaScript concepts such as the event loop, promises, async/await, scope and closures.</p><p>If you have been writing JavaScript applications for some time and have come across a variety of situations, this should not be too hard.</p><p>The most frequently asked question I have ever gotten is to implement <code>debounce</code> and <code>throttle</code>:</p><pre><code class="language-javascript">function debounce(fn, duration) {
  let id;
  return function (...args) {
    if (id) {
      // reset timeout and prevent it from triggering
      // if debounced function is called within duration
      clearTimeout(id);
    }
    id = setTimeout(() =&gt; {
      fn(...args);
    }, duration);
  };
}

function throttle(fn, duration) {
  let id;
  return function (...args) {
    if (id) {
      // if throttled function is called within duration,
      // do nothing
      return;
    }

    fn(...args);

    id = setTimeout(() =&gt; {
      id = null; // release &quot;lock&quot;
    }, duration);
  };
}

// usage example
const helloWorld = () =&gt; {
  console.log(&#x27;hello world&#x27;);
};
const debouncedHelloWorld = debounce(helloWorld, 1000);
const throttledHelloWorld = throttle(helloWorld, 1000);
</code></pre><p>The second most frequently asked question is to implement a sequential <code>Promise.all</code> of sorts:</p><pre><code class="language-typescript">function sequential(data, fetcher) {
  const helper = (index, results) =&gt; {
    if (index === data.length) {
      return results;
    }
    return fetcher(data[index]).then((datum) =&gt; {
      results.push(datum);
      return helper(index + 1, results);
    });
  };

  return helper(0, []);
}

// usage example
const fetcher = (i) =&gt; {
  return new Promise((resolve) =&gt; {
    setTimeout(() =&gt; resolve(i), 1000);
  });
};
sequential([1, 2, 3], fetcher);
</code></pre><h2>Discussion Rounds</h2><h3>Web development tools</h3><p>Regardless of how we wish to deny it, web development tools are an increasingly complex and diverse ecosystem.</p><p>Smaller companies, especially start-ups, require engineers who have a good understanding of these tools. Larger companies will be able to abstract tooling complexity away from engineers unless the role demands it.</p><p>As such, web development tools like Webpack and Babel have become a common discussion topic.</p><p>A good understanding of tools like Webpack would be to be able to explain the following concepts:</p><ul><li>what is bundling</li><li>what is tree-shaking</li><li>what is lazy-loading and why does it matter</li><li>how loaders work</li></ul><h3>React or web framework of choice</h3><p>If the role states that React knowledge is required, you may be expected to answer or code out React components. If you do not have React experience, using other frameworks would be possible, provided that you can explain well what is happening.</p><p>This may range from implementing a feature live or simply answering or explaining some React concepts such as <code>useEffect</code>&#x27;s dependencies array or <code>shouldComponentUpdate</code>.</p><h3>Work experience</h3><p>Aside from the two topics mentioned earlier, interviewers might dive into one or two things that they found interesting in your resume and ask you to elaborate.</p><p>As I had some experience in writing Babel plugins and jscodeshift code mods, I walked them through how I utilized those tools to help make the company codebase better.</p><h2>Implementation Rounds</h2><p>In all of my interviews, I have only been asked to implement a feature twice. It is not a common question, but it may come up.</p><p>This would come down to how well-versed you are with your basics such as HTML and CSS, as well as tools and frameworks. As an example, one of the question I have gotten was to implement an autocomplete search bar like Google&#x27;s. If you have built something like that before, it is doable within an hour.</p><p>Implementation rounds feel very similar to algorithms, as you need to actively find the best solution while thinking out loud and explaining your decisions.</p><h2>Algorithm Rounds</h2><p>As software engineers, we are not unfamiliar with algorithm questions. Leetcode and Hackerrank are common resources used for practicing such questions.</p><p>As I knew this was my weakness, this was where I spent the most time. It may be a little ironic that I chose Python over JavaScript as my language of choice for tackling algorithms. JavaScript&#x27;s lack of a native minheap and binary search implementation made it a slightly worse choice.</p><p>For those who are just starting to learn Python or getting back into it, here&#x27;s my <a href="https://repl.it/@li_kai/Python-Cheatsheet">Python cheat sheet</a>.</p><h2>Conclusion</h2><p>Front end software engineer roles are not very different from general software engineer roles, but they do tend to be more specialized and in some ways, require even more effort.</p><p>If you are passionate about this field and interested in what you do, this would not be too high of a hurdle. I hope my experience and tips were useful to you, and good luck in your search!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Front End Career Questions]]></title>
            <link>https://techinterviewhandbook.org/blog/front-end-career-questions</link>
            <guid>front-end-career-questions</guid>
            <pubDate>Sat, 28 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Recently a junior front end engineer at a startup in Singapore reached out to me to ask me how front end development as a career.]]></description>
            <content:encoded><![CDATA[<head><link rel="canonical" href="https://yangshun.im/blog/front-end-career-questions"/></head><p>Recently a junior front end engineer at a startup in Singapore reached out to me to ask me how front end development as a career.</p><h3>My manager told me that currently it&#x27;s a bit hard to define requirements &amp; expectations for higher tier / higher Individual Contributor (IC) level for Front End engineers in the organization. Since you are working at Facebook, I am wondering what are some requirements &amp; expectations for higher IC level there for Front End engineers (maybe around IC4, IC5 and above if that&#x27;s kinda the level you use there)?</h3><p>For smaller companies that might be true, but it&#x27;s still possible if you don&#x27;t limit yourself to front end work. Going up the levels is all about scope and complexity. IC3s (Junior Engineer) work on tasks, IC4s (Software Engineer) work on features, IC5s (Senior Software Engineer) work on projects, IC6s (Staff Software Engineer) work on huge projects spanning across teams, IC7s (Senior Staff Software Engineer) work on projects spanning across the org, IC8+s (Principal Software Engineer) work on projects spanning across the company or even influencing the industry. If you&#x27;re able to show that you can handle scope of that magnitude, there shouldn&#x27;t be a reason not to be compensated at that level. That said, the rough guide I proposed here is for a company the size of Facebook where we have 10s of thousands of Engineers. Doing work that impacts an entire company of 10 people likely won&#x27;t be IC8 level work. For reference, React core team is mostly made up of IC5s/IC6s and one IC7. Flow has a number of IC5s and IC6s as it&#x27;s technically complex and affects how the entire company writes JavaScript. GraphQL has many senior engineers and the creator of GraphQL is currently a director (IC8 equivalent).</p><h3>Are you still doing a lot of Front End-related development work now? Be it in the company or personally? If yes, I am just curious what are the things you often do, and what do you like in particular about Front End development?</h3><p>I&#x27;m still doing a lot of Front End development for work. Less in a personal capacity ever since I stopped working on Docusaurus as a side project. You can check out my GitHub to see what stuff I&#x27;ve done. At work I&#x27;m in-charge of oculus.com and built the infra for it. I built a design system of React components for the content developers to develop the marketing pages.</p><p>I really like all aspects of Front End development, maybe except optimizing performance. At FB we build a lot of Front End-related tooling (e.g. Jest, GraphQL, Flow) and libraries (our internal CSS-in-JS solution, Docusaurus, React, Flux, etc) which is personally very exciting to me. Even within front end development, there are various layers - very user-facing stuff (HTML/CSS/visual related code) and back end (JavaScript stuff, network layer, storage), tooling (ESLint, Babel, TypeScript, webpack). I call myself a full front end stack developer as I&#x27;m decent across the entire front end stack. I&#x27;m especially excited about tooling work as the problems there are interesting and challenging. Typically only large companies face such problems because they only occur at scale, hence I really like being at FB because FB is one of such companies.</p><h3>Personally, do you have any tips on how best to grow as an Front End engineer? Are there any particular areas that you&#x27;d recommend?</h3><p>Learn your fundamentals well. There are many UI and CSS libraries out there, but a good Front End developer still needs to know how to build a website without them. Peek beneath the abstraction layers and understand the problems these libraries are trying to solve, do not use them blindly. Keep building stuff - try to build a simple version of the libraries you frequently use, build interesting user interfaces and products, etc.</p><h3>What do you think about developing breadth-wise vs depth-wise? For example, do you think it&#x27;s important for a software engineer to know more about other fields besides the end he/she is currently working at? In particular, what do you think about an Front End engineer that knows BE (i.e. a full-stack developer), or an Front End engineer that knows mobile development (with the advent of React Native or Flutter)?</h3><p>I somewhat answered this in another <a href="/blog/are-front-end-development-skills-enough-for-a-career">blog post</a>. Lemme know if your question isn&#x27;t answered after reading it.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Facebook Career Q&A]]></title>
            <link>https://techinterviewhandbook.org/blog/facebook-career-questions-and-answers</link>
            <guid>facebook-career-questions-and-answers</guid>
            <pubDate>Thu, 19 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[A number of students from the Project Intern group have been asking me questions related to Facebook internships, working at Facebook, and my personal journey. I decided to write down my answers in the form of a blog post so they can be shared more broadly and I can point people to this blog post in future whenever I get asked similar questions.]]></description>
            <content:encoded><![CDATA[<head><link rel="canonical" href="https://yangshun.im/blog/facebook-career-questions-and-answers"/></head><p>A number of students from the Project Intern group have been asking me questions related to Facebook internships, working at Facebook, and my personal journey. I decided to write down my answers in the form of a blog post so they can be shared more broadly and I can point people to this blog post in future whenever I get asked similar questions.</p><p><strong><em>I am not a recruiter and I might have answered some of the recruiting or internship-related questions wrongly, so take them with a grain of salt. Opinions expressed are my own and do not represent the views of my employer.</em></strong></p><h2>Glossary</h2><ul><li>APAC - Asia Pacific Region</li><li>CVWO - Computing for Voluntary Welfare Organizations</li><li>DSA - Data Structures and Algorithms</li><li>EE - Enterprise Engineer/ing</li><li>FRL - Facebook Reality Labs</li><li>FTE - Full-time Employee</li><li>IANACP - I am not a career portal</li><li>IANAR - I am not a recruiter</li><li>IANAL - I am not a lawyer</li><li>IINW - If I&#x27;m not wrong</li><li>RA - Residential Assistant</li><li>SWE - Software Engineer/ing</li><li>TPM - Technical Program Manager</li></ul><h2>Caveats</h2><ul><li>These replies are tailored towards the Facebook interview process for interns and fresh grads. They may or may not apply to other companies, especially smaller ones.</li><li>Most of these answers apply across the board for every engineer role but there are exceptions for certain specialized engineering roles like Security Engineering or Front End Engineering.</li></ul><h2>Application/Referral</h2><h3>What&#x27;s the application process like (for internships)?</h3><p>Apply on <a href="https://www.facebook.com/careers">https://www.facebook.com/careers</a>. Recruiters will reach out to you if there&#x27;s interest and chat with you over the phone. If it goes well, there will be two rounds of coding interviews.</p><h3>What are some qualities/experiences that Facebook looks for in a resume?</h3><p>IANAR and I don&#x27;t filter any resumes, so I don&#x27;t exactly know. But from experience, write stuff that makes you stand out from the rest. Have good grades? Add it in. Scholarships/awards, write them down. Have extensive internship experience? Include them in an organized format. Built cool hacks/side projects? Add the GitHub links and demos. Won hackathons/competitions? Put them in. One thing is for sure - few companies would want to hire candidates who only have academic credentials and no industry experience.</p><h3>Does GPA affect a lot on the resume screening?</h3><p>GPA/CAP/grades is just one of the signals that can be extracted from the resume. As mentioned above, there are many other qualities and achievements a candidate can possess. Personally if I had my own company, I would rather hire a candidate with a high second upper and fantastic open source portfolio with multiple internship experiences at big companies over a student with CAP 5.00 but has nothing else to show for. Not that one candidate is stronger than the other, but the former would probably be a safer choice.</p><h3>In general, how&#x27;s the barrier of entry for big tech companies like FB in terms of grades, would a second lower (3.5-3.9) even get pass the resume screening stage?</h3><p>Grades matter less the longer someone has left school. For students, because there&#x27;s a lack of working experience, grades might play a larger part in the resume screening, but it&#x27;s by no means the only thing that matters.</p><h3>Is the resume screening done by AI / human recruiter? What is being looked out for on the resume? As someone who isn&#x27;t strong academically, will I be able to compete purely based on experience on my resume?</h3><p>IANAR. Usually people suck at their studies because instead of studying they spent their time elsewhere. If it was spent on related stuff like hacking on side projects and internships, that probably makes up for the subpar academic grades. But if you suck at studies and spent your time clubbing instead, then I&#x27;m sorry you probably won&#x27;t get past the screening. Note that CS is such a hot course now that only the best students can get in these days. A fair amount of students have both good grades AND non-academic achievements. Competition is tough!</p><h3>Are there any languages/frameworks that are helpful to know before applying?</h3><p>For Software Engineering (SWE) positions, Facebook doesn&#x27;t require you to have experience in specific languages/frameworks before joining. Likewise, there aren&#x27;t any of such restrictions for SWE interviews. You can do your interviews in your programming language of choice. One exception to this is if you&#x27;re applying for a Front End Engineer or Mobile Engineer position, then you will be asked domain-specific questions and by extension, required to use JavaScript/Java/Kotlin/Objective-C/Swift to answer the questions.</p><h3>Are intern applications (and hence, the spots) based on first-come-first-served?</h3><p>IANAR. But as with all jobs, there are definitely limited spots and once they&#x27;re filled up there isn&#x27;t a need to hire anymore. Applying in 2022 for the internship which application opens in September, is almost definitely too late. You can apply later (October) if you want more time to prepare, but there might be fewer slots left. Moral of the story - prepare early.</p><h3>How&#x27;s the referral process about/like?</h3><p>Facebook will send you a form (initiated by me) where you can fill up your name, email, upload your resume, and select the roles you would like to apply. From there on, from an applicant perspective it&#x27;s not different from them applying themselves on the Facebook Careers Portal.</p><h3>May I know until when your referral is valid? I was hoping to start my application a bit later so was hoping to reach out to you then for a referral. Is there any last date to &quot;claim&quot; this in any way?</h3><p>As long as I remain employed at Facebook, I&#x27;m happy to refer you if I feel that you stand a good chance passing the interviews. As mentioned earlier, if you apply when unprepared, you risk wasting the chance. Take too long and apply too late, then you risk the slots being all filled up. I don&#x27;t know the last date to be referred but I recommend not later than end of September.</p><h3>Any tips for a good resume to apply for FB?</h3><p>Answered above. I don&#x27;t think most students need to worry about the resume screening stage. Worry about the interviews. Use a neat and standard template and you should be fine.</p><p>If you&#x27;re applying for US positions, it&#x27;d be helpful to do the following:</p><ul><li>Mention expected year of graduation (month as well if you know)</li><li>If you&#x27;re applying to US roles, mention US work eligibility. This is straightforward for Singaporeans (mention eligibility for H-1B1 visa)</li><li>Use GPA instead of CAP</li></ul><h3>If I build my projects must some of them be pushed to production before applying?</h3><p>Best if you can, but I&#x27;m not sure if recruiters actually click on your project links. Maybe just don&#x27;t include the link if it&#x27;s not really usable?</p><h3>Do you have any tips in applying for a fresh grad SWE role in facebook?</h3><p>Make sure you know your algorithms at the back of your hand. Fresh grad SWE role interviews also have a behavioral round, so be prepared to talk about your past experiences. There&#x27;s a section in this handbook which covers those.</p><h3>Apart from preparing for DSA questions, are there other areas you would recommend preparing for (either for the interviews / a better chance to get shortlisted for them)?</h3><p>If you&#x27;re going for a SWE intern/grad position, DSA is the most important. The bulk of the assessment is on DSA. Grind your LeetCode.</p><h2>Would love to find out what the interviewers at Facebook usually look out for in candidates!</h2><p>DSA. DSA. DSA. Communication skills - You must be able to also communicate your thought process well throughout the interview.</p><h3>Am I able to apply for both local and overseas (in the USA) roles for FB and be considered for both? Or would I only be considered for SG&#x27;s openings since FB has an office here and I&#x27;m already located in SG?</h3><p>IANAR. Typically you will only be interviewed for one location. Candidates based in Singapore are free to apply to non-Singapore positions and intern there.</p><h3>What is the application process like for the Software Engineer role? Is it any different from the Enterprise and Front End Engineer role?</h3><p>For SWE, I&#x27;ve answered above. I&#x27;m not sure about Enterprise Engineers, I suspect it wouldn&#x27;t be too different. For Front End Engineers, the questions will be domain-specific, hence will require candidates to be familiar with HTML/CSS/JS/Vanilla JS DOM manipulation methods, and less emphasis on Data Structures and Algorithms. I would expect most students to not have enough domain expertise to pass a Front End Interview, so don&#x27;t anyhow apply for it. Simple litmus test - can you build a TODO list app in pure vanilla JavaScript, without using React/jQuery?</p><p>Note that Facebook Singapore currently does not hire Front End Engineers and interns. If you&#x27;re interested in a Front End Engineer internship/FTE position, you&#x27;d have to look overseas.</p><h3>Is there anything I can do/prepare to improve my chances of getting through the recruiter screen?</h3><ol><li>Get a referral</li><li>Have a solid neat resume that showcases your abilities</li></ol><h3>How much does a referral help in landing a interview?</h3><p>Referrals tend to have a higher visibility than someone who applies on the Careers Portal directly, but that&#x27;s about it.</p><h3>Are there any related full time openings at FB, and if so how can I help you decide if I&#x27;m a good candidate to refer?</h3><p>I look through your transcript and resume and look for stuff that suggests you&#x27;d make a good employee. What things I look out for - excellent grades in the relevant modules, notable internships, interesting side projects, ICPC/IOI awards. Bonus: Open Source experience. I&#x27;m a huge fan of Open Source and if you have built something really cool that&#x27;s Open Source, I&#x27;d refer you even if your grades are terrible.</p><h3>Do I stand a good chance if I&#x27;m from a Info Systems background but gotten good grades for programming modules? Currently taking some CS modules now too.</h3><p>There are many IS folks who are good engineers. As long as you can demonstrate that you have mastery of programming and DSA, it shouldn&#x27;t be an issue.</p><h3>Would you know whether Facebook&#x27;s hiring process has a preference for single-page resumes?</h3><p>As an interviewer for FB senior-ish candidates, I have seen some horrendously long resumes. So I would think single-page is not a hard rule, more of a recommendation. If you are exceeding a single page, then you are likely including too many things. <a href="https://docs.google.com/document/d/13c8KsKSsP5biJT8N70aLULyq-I5ywuWrxRxr2faQTK4/">My own resume</a> is a 2-column one with small-ish font which I used in my last job hunt in 2017. It has got me replies from recruiters. This was before I started working at Facebook, so the Facebook branding isn&#x27;t the main reason.</p><h3>I&#x27;m an international student at SMU, does Facebook sponsor employment pass?</h3><p>IANAL. But we have had international students interning at Facebook before and are currently working at Facebook. Please check with the recruiter.</p><h3>I&#x27;m from SUTD and my schedule is pretty weird! I&#x27;m graduating next year so should I apply for internship or a job?</h3><p>If you have any spare summers left, you can and should go for an internship. IMO passing an internship interview is easier than a full-time interview, and likely leads to a better conversion package also if you have performed well during the internship.</p><h3>Am I eligible to work overseas in US/London/Canada?</h3><p>IANAR. If you&#x27;re Singaporean, you&#x27;d have no problems working anywhere. If you&#x27;re a foreign student, you could check with your seniors or just ask the recruiter when you get the chance.</p><h3>I want to intern in SG and work in US. Is that possible?</h3><p>For interns, your return offer will be for the location you interned in. So you should also factor in where you want to work full-time and strive to intern at the same location.</p><h3>How long do I have to wait if I get rejected?</h3><p>There&#x27;s a 6-month to 1-year cooldown period for each role - E.g. if you&#x27;ve interviewed for SWE in the US and failed, you&#x27;d have to wait some amount of time before interviewing for the SWE position again in SG (or any location). This cooldown is per role, so you&#x27;re free to apply again immediately and interview for another role, e.g Front End Engineer, assuming your resume gets picked up.</p><p>As of writing, internships in FB SG are run annually so if you fail this year you&#x27;d have to wait for the next.</p><h2>Interviews</h2><h3>What&#x27;s the interview process like?</h3><p>For all roles, there should be an initial contact (e.g. phone call) with recruiters. For interns, it would be 2 rounds of online coding interviews where the focus is on DSA. For fresh graduates, it would be 2 rounds of online coding interviews and 1 behavioral round.</p><h3>Based on your past experience, if a candidate does not get full marks for the online coding test, what are the chances of him or her getting a face to face interview? Just curious about the level of competition haha (This is because I&#x27;m not that worried about whiteboard interviews but afraid that I may not even get a chance to go through it)</h3><p>I don&#x27;t even think there&#x27;s an online coding test for Facebook. Can&#x27;t answer this.</p><h3>Would FB US hire SG citizens considering that there&#x27;s an FB SG office already?</h3><p>Yes.</p><h3>How I could improve my chances on landing an internship?</h3><p>Study your DSA, grind LeetCode, do mock interviews with your peers to get used to talking out loud/communicating your thoughts while coding.</p><h3>I wanna learn as much as possible from you about topics that might benefit me</h3><p>Benefit you in terms of what, and when? For passing the interviews, DSA and LeetCode. For the actual internship, that&#x27;ll be a much longer answer which I shan&#x27;t go into because that&#x27;s a problem for later, if you pass the interviews.</p><h3>I heard FB doesn&#x27;t ask dynamic programming questions, correct me if I&#x27;m wrong. Are there any topics I should be focusing more on?</h3><p>I can neither confirm nor deny this. General tip for coding interviews - focus on the most common data structures and algorithms. If a particular topic is really obscure, most likely you won&#x27;t be asked on it because asking obscure stuff sometimes work against the interviewers as it&#x27;d be harder for them to extract the right signals out of it. Look at the recommended practice questions in the handbook.</p><h3>How many rounds of interviews are there? Does FB ask system design on the live interviews?</h3><p>For internships, typically two coding. For fresh grads, typically two coding with one behavioral. No system design for internships and fresh grad interviews.</p><h3>Would I be tested on specific tech stacks/real project experience, or is it purely algo based?</h3><p>If you&#x27;re applying for a SWE position, you won&#x27;t be tested on a specific tech stacks/languages. The algorithm questions asked can be implemented in most programming languages (but you probably want to avoid using wenyan). If you&#x27;re applying for a specialized position, then you might be asked to use domain-specific languages, which the recruiter should (will?) let you know ahead of time.</p><h2>Internship</h2><h3>What are 3 qualities of a intern/new hire fellow FB engineers look out for?</h3><p>This is a long answer and there are more than 3 qualities. But to get a conversion offer, in summary, interns have to show productivity and complete their assigned projects within the internship duration, product high quality code/work, demonstrate fast learning speed, actively communicate and collaborate, and show initiative and independence. Pretty much common sense if you ask me.</p><h3>What are the different types of internship roles that are opening in FB (both here in SG and overseas)!</h3><p>IANACP. FB SG is quite limited in the sense we primarily only hiring SWE, EE interns. But I think I have seen TPM interns before. For overseas, almost every role is available.</p><h3>Are there machine learning/data science internship roles at Facebook SG? How about in other countries?</h3><p>Not that I know of. Yes there should be for overseas, but then you&#x27;ll be competing with a global pool of candidates.</p><h3>What does the SWE role entail? Tech stack and what to expect?</h3><p>Software engineering of course. To answer seriously, it really depends on the team and their work. Most (all?) SWEs write code to solve problems. FB is big enough such that there are teams using almost every language out there.</p><p>Here&#x27;s an oversimplified overview:</p><ul><li>Web Products - JavaScript/React/CSS/GraphQL/Relay/Hack (typed version of PHP)</li><li>Mobile - Objective-C/Java/React Native/Proprietary frameworks</li><li>Back End Services - Java/C++/Python</li></ul><h3>What is the internship format in Facebook like? For example, are the interns inserted into a team to work on issues or are they handed a project to work on throughout their internship?</h3><p>Under normal circumstances, interns would be given one project that should take them the entire internship duration (10 weeks or so out of a 12-week internship) to complete. They will be assigned an Intern Manager that would serve as their mentor throughout the internship. The mentor is typically the one who came up with the project which is broken down into multiple milestones. Responsibilities of an intern manager include: onboarding the intern, giving the intern regular feedback on how they are doing, reviewing their code (typically together with other members of the team), evaluating whether the intern will get a return offer.</p><h3>How&#x27;s the mentorship like for FB interns? Do a mentor work together with intern on the same project? Are mentors randomly assigned within the company or do they volunteer for it?</h3><p>Intern managers may or may not work with the intern on the same project, but they definitely should have context over the intern&#x27;s project and be able to review (or at the very least, find suitable people) the intern&#x27;s work. Employees can sign up to be an intern manager for a specific internship season. It is not random. It would be a disastrous and unpleasant experience for both the intern and the intern manager if an employee got randomly assigned to be a manager.</p><h3>What are some products that interns will get to work on in Facebook Singapore?</h3><p>Intern projects are typically self-contained and achievable within the internship duration. Some example of intern projects in FB SG - rebuilding Oculus Accounts Portal (<a href="https://secure.oculus.com">https://secure.oculus.com</a>) using a modern React design system, building a self-serve order return flow into Oculus Accounts Portal. Outside of FB SG - Building the settings page of facebook.com, building an internal debugging tool (something like Redux Devtools).</p><h3>What kind of projects are interns usually given (like internal tooling or external products)</h3><p>Answered above. Can be both, depends on the team. In Singapore, we primarily have product teams, so the projects are likely about adding product features.</p><h3>Will there be any chances of being transferred to an overseas office after being accepted as an intern?</h3><p>Yes I know of that happening to some ex-interns. However, that could be due to special COVID circumstances which might not necessarily apply in following years. You&#x27;d have to check with the recruiter.</p><h3>How many interns is FB looking to onboard next summer? Not sure if this can revealed but thought I&#x27;ll ask nonetheless</h3><p>Don&#x27;t know and even if I knew, I can&#x27;t say. We had 4 interns in 2019 and around 10 interns in 2020. FB Singapore office is growing quite rapidly.</p><h3>I&#x27;m actually more interested in mobile dev, are there open internship roles for this in the SG office?</h3><p>There are some teams in FB SG which work on mobile. Prior to starting internship at FB, interns will get to indicate their preference of tech stack and they will be matched to teams/projects which match their preferences.</p><h3>Do you get to try out different parts of engineering as an intern / junior swe in facebook? e.g. if I were doing back end but I would like to try front end later down the road</h3><p>Short answer: for interns, not so much. For FTEs, much more autonomy.</p><p>Longer answer: Interns are assigned a project which usually have a pre-defined tech stack. So the engineering work and stack that an intern will be doing is highly dependent on the assigned team and project. If the intern finishes the work early, it&#x27;s possible to ask for more work from their manager and possibly try out other things. If the internship duration coincides with one of the internal hackathons, interns can participate in them and work on anything they want. For SWEs, there&#x27;s a process called bootcamp after joining where employees find their own team to join. That gives them more flexibility in deciding what kind of work they want to do. Internal mobility is very good within FB as well. Personally I&#x27;ve done both front end and back end at Facebook.</p><h2>FB Culture</h2><h3>What&#x27;s the difference between Software Engineer (SWE), Enterprise Engineer (EE), and Front End Engineer? This is because I heard from previous FB interns that they worked on the full stack.</h3><ul><li>SWE - Generalists, they are expected to be able to work on software-related problem given to them and should be able to work across the stack.</li><li>EE - Taken from Facebook&#x27;s Career Portal: &quot;Facebook&#x27;s Enterprise Products team is responsible for building integrated, scalable, and robust Enterprise Applications. As a member of Enterprise Products team, you will play a key role in re-imagining productivity by shipping transformative products that serve diverse aspects of the enterprise&quot;</li><li>Front End Engineers - SWE with front end specialization. The interview is in HTML/CSS/JavaScript and there&#x27;s more focus on domain-specific questions. That doesn&#x27;t mean Front End Engineers can only work on front end stuff, they can work on anything as long as it is what their team needs and they have alignment with their manager. In my experience, Front End Engineers at FB are highly skilled in front end but can do back end work too. Btw I&#x27;m a Front End Engineer 😉</li></ul><h3>What are the opportunities that are currently available for the FB SG office? And perhaps what kind of people do you typically look for? (e.g., in terms of technical skills or perhaps other metrics)</h3><p>There are two main orgs in FB SG - Commerce Engineering and Ads &amp; Business Products. The Commerce Engineering teams in Singapore build e-commerce websites to sell Facebook&#x27;s hardware devices (Quest, Portal) and also sees through the rest of the lifecycle of a purchase - support center, returns, warranties. I&#x27;m in the Commerce Engineering org and my team manages <a href="https://www.oculus.com">https://www.oculus.com</a> and <a href="https://portal.facebook.com.">https://portal.facebook.com.</a> I don&#x27;t know too much about the Ads side of things.</p><p>Read an <a href="https://www.facebook.com/careers/life/help-10-peopleor-billions/">article about my manager, Nishita Agarwal</a>, which mentions empathy as a key trait.</p><p>There&#x27;s also an <a href="https://www.facebook.com/careers/life/software-engineering-in-apac">article about Software Engineering in APAC</a> on the Facebook Careers blog.</p><h3>How is Facebook Singapore different from that at Hacker Way in San Francisco?</h3><p>First and foremost, check out the following (old but still relevant) <a href="https://vulcanpost.com/648705/facebook-singapore-office-marina-one/">article</a>.</p><p>Nit - Hacker Way is not in San Francisco, it is in Menlo Park. Perhaps you meant SF Bay Area. Anyway, FB SG and FB US differ is quite a lot of ways. There are too many to list but I&#x27;ll list the most obvious ones.</p><ul><li>Career Progression - FB US, being the HQ and where the company started, has the most number of teams and you have all levels of seniority of folks there. In FB SG, there are fewer teams and due to the size of the office now, there isn&#x27;t a need for extremely senior engineers yet. So if you&#x27;re talking about long term career progression, SG definitely loses out here. But don&#x27;t need to think so far la, FB SG is still big enough for you to get to senior engineer position and earn enough to live comfortably for the rest of your life.</li><li>Projects - Primarily product teams and hires primarily SWEs and EEs, while FB US has a good mix of teams, including infrastructure teams and hires across all roles. So if you&#x27;re interested in working on infra stuff like our internal logging framework, GraphQL, our internal ORM, you&#x27;d have to look at non-SG offices.</li><li>Changing Teams - SG has fewer teams, so if you were looking to change teams but remain in Singapore, the choices are more limited.</li><li>Company Culture - You don&#x27;t get to attend the events held only at the HQ in-person, such as Zuck&#x27;s Q&amp;A or company town halls or the summer and holiday parties (but there are local versions of them).</li><li>Food - Smaller selection of cafes in SG. The food is still pretty darn good though. There&#x27;s nothing to complain about free food.</li><li>Office - Smaller office in SG, but still one of the coolest in SG. Menlo Park Headquarters is amazing, there&#x27;s an arcade, board games room, a barber, ice cream shop, a gadgets vending machine, and more. It looks like Universal Studios at night. I&#x27;ll just leave this <a href="https://www.youtube.com/watch?v=cY3sMN3wohg">video</a> here.</li><li>$$$ - FB pay is top tier in both US and SG. However in SG, you have to pay less tax and cheaper living expenses. In SG, I earn less but save more due to the large difference in taxes.</li><li>Taxes - SG tax is crazy low compared to US. US taxes you on every damn thing, including the capital gains from your stocks and bank interest earned (WTF), but SG doesn&#x27;t.</li><li>Engineering Culture - Similar-ish because quite a number of engineers in FB SG moved here from FB US, including myself. But being a smaller office, we don&#x27;t have as many extremely senior engineers.</li><li>Social Security - I thought Bay Area was relatively safer than the smaller US states, but these days <a href="https://www.youtube.com/watch?v=0ybiHCxNb3w">driving on the highway also can get shot</a>, so I don&#x27;t know anymore. I think SG is definitely safer, at least you definitely won&#x27;t receive any racist remarks or comments while walking on the streets.</li><li>Personal Happiness - Obviously you&#x27;d have fewer friends and family if you&#x27;re in the US. If that&#x27;s important to you then life there might be hard. But you can make new angmoh friends or hang out with the steadily growing SG community over there.</li><li>Dating Scene - If you&#x27;re single, it might be hard to find a long-term partner there. The female Singaporean engineers there are mostly taken, those that are not, probably want to stay single. Dating there will be quite hard! I know of friends who got together with Americans/immigrants and then they get a green card and plan to stay there for good. You can consider that too.</li></ul><p>I would describe myself as a small fish in a big pond when I was in FB US and am now a big fish in a smaller pond in FB SG. I enjoy my current work and team in FB SG and I see myself being in this role for a few more years at least.</p><h3>Are Facebook internal hackathons only within branches? Eg. only within FB Singapore?</h3><p>They are kinda global in the sense that the timelines are global but each region has different people leading it for the regional offices. Participating teams will take part in the regional selection and winners of the regional ones come together to present to the global heads.</p><h3>What is the difference between Software Engineer and Front end Engineer at Facebook, and considering that my experience lies mostly in Front End Engineering, should I only be applying to the FE role?</h3><p>Differences answered above. If you&#x27;re solid in your Front End web fundamentals (HTML/CSS/JS), and suck horribly with DSA, I think you might stand a better chance going through the Front End interview loop. Unfortunately as of writing FB SG doesn&#x27;t hire Front End Engineers so you&#x27;d have to look overseas for such a role.</p><h3>In the past one year, I have been hearing quite a lot of things about FB Reality Labs, and I heard that quite a significant portion of FB engineers are working on it now (and I think you are as well?)... do you have any thoughts about how it feels to work there and perhaps the future prospects?</h3><p>I work on selling FRL hardware, not directly on FRL hardware/software itself. If you haven&#x27;t heard of the <a href="https://www.theverge.com/22588022/mark-zuckerberg-facebook-ceo-metaverse-interview">metaverse</a>, you should read up about it. I don&#x27;t have too many opinions on the future of FRL but I can say that Quest 2 is the market leader in terms of VR headsets and <a href="https://www.roadtovr.com/zuckerberg-quest-2-mainstream-vr-headset-facebook-q4-2020-earnings/">Quest 2 was a major driver behind FB&#x27;s $885 million 2020 Q4 non-ad revenue</a>.</p><h3>What engineers is Facebook looking for - especially for New Grads? At the moment, I have knowledge on a breadth of tools but when asked on under the hood stuff, I can only explain what the tool / framework is trying to extract instead of going in depth as to how stuff actually works. Is the firm looking for new grad engineers who are language / tool / framework agnostic and can work towards building the skillset within the firm - or people who already have a speciality?</h3><p>FB uses Flow (for JavaScript typechecking) and Hack (typed version of PHP) which most people outside of FB won&#x27;t use. If we were to hire only people who have prior experience with them, then we&#x27;d have a really hard time filling our head count.</p><p>When tech companies hire SWEs, usually it&#x27;s for a generalist position and they would expect the employees to pick up any new language or tool to get the job down. If you master your fundamentals, doing that shouldn&#x27;t be too hard. So really most companies would want to hire people who can learn fast and adapt. The exception is if you&#x27;re a super senior person (think principal level and above), then you&#x27;d be hired for your specialized skillsets probably because the company needs some subject-matter expert in that area. But most of you are still undergrads, that doesn&#x27;t apply to you.</p><p>At the end of the day, many language and tools are similar-ish. New technologies learn from existing technologies and improve on them, learning new technologies isn&#x27;t always that foreign.</p><p>However, to be a good SWE, I would recommend peeking beneath the abstraction layers and understanding what problem this technology is trying to solve, how it works under the hood, and what advantages/disadvantages it has compared to similar technologies. That&#x27;s why I love Open Source, all the code is public - you can read the code, look at how the projects are structured, and even contribute to them. I also love reading articles comparing technologies so that I know what tradeoffs the projects are making and what&#x27;s the right tool for the job. Don&#x27;t be a mindless drone who uses technologies without knowing why you are using it instead of alternatives. That&#x27;ll be an easy way to get phased out really soon, especially considering how fast technologies move.</p><h3>In my conversations with most engineers from US tech companies, I often hear that one of the major shortcomings of working in the Singapore offices is that they are more auxiliary in their functions, and that opportunities for &quot;core&quot; engineering work are few and far between. Since you have worked in both the Menlo Park and SG offices, I&#x27;d love to hear your response to this within the context of Facebook.</h3><p>Answered above in the US vs SG comparison.</p><h2>Personal Experience</h2><h3>Can I know about the project you&#x27;re involved with in FB?</h3><p>I&#x27;m currently working on a multi-year project which I can&#x27;t reveal the details until we launch next year. Last year, I worked on Facebook&#x27;s e-commerce websites - <a href="https://www.oculus.com">https://www.oculus.com</a> and <a href="https://portal.facebook.com.">https://portal.facebook.com.</a> I built design systems in React and a CMS framework to allow non-engineers to change the marketing content on oculus.com anytime they wish. One of the problems my team works on solving is to decouple marketing launches from engineering work, enabling the business teams to launch new products and campaigns on our e-commerce websites.</p><h3>Why did you choose front end engineering, and separately, how do you think the workload at Facebook compares to that of other &quot;top&quot; companies such as Google?</h3><p>As a student I also liked to do design, so it was very cool for me to be able to implement my own designs on the web. That&#x27;s why I chose to do client side engineering. As to why the web, I like the fast iteration and release cycle of building on web platforms. My first hardcore CS course was actually CS3217 (I only took CS1010E and CS1020E prior to that), so the first proper software I wrote was on iOS platform. Developing on mobile is too troublesome for my liking, because I often need a physical device, compiling the app takes so long, and you have to play by the platform&#x27;s rules. They could take down your app anytime they want. On the other hand, the web is much more open and anyone can launch any website they want in a matter of hours. Being able to show people what I built by giving them a URL is an exciting experience that never gets old.</p><p>I haven&#x27;t worked at Google so I can&#x27;t comment on workload at Google. But Google is known as a good company to &quot;rest and vest&quot; whereas Facebook has faster promo cycles and rewards their top performing employees disproportionately.</p><h3>Am I correct to interpret that you started at Grab after graduation? What internships did you do during your studies?</h3><p>Yes I worked at Grab for two years after graduation, you can check out my LinkedIn. Regarding university internships, Year 2 I did CVWO, Year 3 NOC in Silicon Valley for EasilyDo (now called Edison), Year 4 I was a Game Producer (non-programmer!) in SUTD Game Lab (previously MIT Gambit program). Back during my time, overseas internships weren&#x27;t common. The number of Google and FB interns each year was fewer than 10.</p><h3>I&#x27;m also curious about what you do in your role as a Front End engineer, and why you decided to work at Facebook?</h3><p>As a Front End Engineer at Facebook, I primarily write JavaScript and some Hack (PHP with types). Being at Facebook is fun because I get to do front end work which isn&#x27;t product, such as building React-based design systems, front end tooling, lint rules, CSS frameworks (Infima), Static site generators (Docusaurus).</p><p>Facebook is the leader in terms of front end web technologies. If you develop on the web, you would more likely than not, be using some of Facebook&#x27;s open source work, whether directly or not. There&#x27;s React, Flux, Jest, GraphQL, React Native, Docusaurus, Draft.js, Relay, Flow, just to name a few. By working at Facebook, I also got the chance to work on Docusaurus and for two years, led the development of Docusaurus v2, which is one of the projects I am most proud of in my career. Today, Docusaurus is powering most of Facebook&#x27;s open source websites. Many of the open source leaders I look up to were also at Facebook. I got to contribute to many high profile open source front end projects by Facebook and also work alongside the creator of React (Jordan Walke) on improving the front end of Facebook&#x27;s Ads Interfaces. Not to mention that Facebook employees will be the first to dogfood React&#x27;s new APIs and participate in design discussions and influence the future roadmap of React.</p><p>On the culture and working environment front, I have always vibed with Facebook&#x27;s hacker culture and products more than Google&#x27;s, so naturally I chose Facebook over Google even though their offers were comparable and I was given a chance to work on Google&#x27;s search results page.</p><p>Facebook is the best place for a Front End Engineer to grow and learn from the very best. So it was the most obvious choice for me and I&#x27;m glad I made that decision. It&#x27;s the best place I&#x27;ve worked at thus far (almost 4 years!) and also financially a great choice.</p><h3>Could I ask about your personal experiences at FB in terms of learning opportunities and the work you do? :)</h3><p>The learning opportunities depend on many factors - individual preferences, team, projects, luck. Facebook is such a large company that covers virtually almost every domain of technology one can be interested in. With great internal mobility, it isn&#x27;t hard to find a project that one will be passionate about. The benefits (and also downsides) of working at such a large company is that you often have to think about scalability in your work. How do you scale your work to the tens of thousands of engineers using your libraries or the billions of users using your product?</p><p>Facebook is also a company which takes the growth of employees very seriously. We have clear levels and expectations for engineers, supportive managers who really care about the growth of their team, mentorship programs available for anyone who wants to grow in a particular area. One of a manager&#x27;s core responsibilities is to grow their team and employees, and they are being evaluated on that, so you can be sure that they treat it seriously. We have weekly 1:1s with managers and with our leads. Personally I&#x27;m mentoring around 3-4 junior engineers and helping them to grow into senior engineers in both their technical and organizational skills.</p><p>I&#x27;ve answered about my work above.</p><h3>What made you and the team came up with the idea of NUSMods and NUSWhispers? I think its really great to code for good and fulfilling stuff rather than coding for corporate means</h3><p>I didn&#x27;t come up with NUSMods. <a href="https://nusmods.com/team">Beng</a> did. I helped to build features (my favorite being theming and dark mode), recruit members into the team, and also started the v3 rewrite which is the one you are using now. Most of the credit would go to <a href="https://www.github.com/ZhangYiJiang">Yi Jiang</a>, <a href="https://www.github.com/li-kai">Li Kai</a> and <a href="https://www.github.com/taneliang">E-Liang</a> for the current version. NUSMods code base isn&#x27;t exactly that big, but it took us over a year of work to rewrite it on a modern stack.</p><p>Shout-out to <a href="https://www.github.com/chrisgzf">Christopher Goh</a> for taking the helm now! Joining NUSMods was one of the best decisions in my life, as impacted the lives of so many students (I daresay above 100k), learnt so much from working on it (it&#x27;s a relatively complex web application), and it helped me grow my network of like-minded individuals. <strong>We need more people to contribute so that the project can live on.</strong> Notice that the NUSMods core team (and alumni) have pretty zai backgrounds? Correlation or causation? Maybe both.</p><p>I came up with the idea for NUSWhispers but I didn&#x27;t write much code for it. I was tutor for a web development course (CP3101B) back in 2015 and I proposed that idea to some students. I&#x27;m glad they did a darn good job of it. Back then I wanted to create a platform that could connect and help students around the school and the idea of an anonymous platform/page sounded like fun.</p><p>I like building stuff that people use, and after graduation I try to open source my stuff. This website you&#x27;re reading now is also one of my largest open source work (in terms of popularity).</p><h3>I understand that you&#x27;ve been in FB for a couple of years, and worked in tech companies like Grab as well, given your prev/current experiences + what you&#x27;ve heard from fellow colleagues and peers, in your opinion what makes FB different from the other tech companies in terms of work done and how an entry engineer could expect to contribute?</h3><p>I have only worked at two companies, so I wouldn&#x27;t say I have seen a lot. But a few things stand out to me about FB as compared to other smaller companies:</p><ul><li>Top of the market compensation. It&#x27;s really crazy a lot. Maybe not as much as quant trading firms, but if you also factor in other stuff like interesting work, social impact, then to me FB still comes up on top.</li><li>Bottom-up culture. In some companies, engineers are treated like mindless drones and expected to just execute. But not at FB. At FB, engineers are expected to do a fair bit of product and project management, propose ideas and lead the roadmap for their team, especially if their team&#x27;s product is a highly technical one. We have lots of flexibility and autonomy to manage our own work and what we want to do with our time. As someone who has many ideas and likes to build them, it suits me well.</li><li>Lots of responsibilities given. FB trusts you to do the right thing. You could technically bring down facebook.com on your first day of work if you were careless (or evil).</li></ul><h3>How do you run your team? This question is relating to the culture you foster within your own team.</h3><p>We have very few processes. My team is excellent so I trust them to do the right things and they don&#x27;t disappoint. In my current multi-year project, I broke it down into smaller parts and pieces and assigned them to my teammates according to their interests and expertise. I set the guidelines and some general engineering principles, make sure my team is aware of them and we stick to them when developing. We set goals for the half and then we&#x27;re pretty much running the project each on our own. On a day-to-day basis, I spent about half my time writing code and the other half reviewing code and attending meetings. I&#x27;m also mentoring a few engineers and I guide the newer engineers more and provide them with constant feedback on technical work and behavioral changes that could help them to grow.</p><h3>How has Facebook impacted your career in terms of learning and growth and since you probably have many FANG companies to choose from, what is Facebook unique selling point to you personally?</h3><p>By working at Facebook, I got to see how large engineering teams operate at scale, how products are developed and launched to millions of users, and learn from the very best engineers in the world.</p><p>Front end and open source. I answered in more detail above.</p><h3>Are most of the projects at Facebook internal tools for the company or more for the public/users? Or does this depend on the team you work at?</h3><p>There&#x27;s a good mix. Yes it depends on location as well. Most infra teams and in the bigger engineering offices (US, London). Singapore is still new and growing rapidly.</p><h2>Career</h2><h3>I&#x27;d like to seek your advice on what I should be prioritizing in my next two years of school in order to gain relevant skills/experience to stand out to FB recruiters when I graduate.</h3><p>Work on being a good engineer who has mastery of the fundamentals. Good grades, impressive internship experiences, side projects, etc are important but only for getting the interview. At the end of the day it doesn&#x27;t matter how much your CAP is if you can&#x27;t answer the interview questions, which boils down to your mastery of the skills needed to being a SWE. Do things that you are interested in AND also benefits you.</p><h3>Just wanted to hear your opinion on how much emphasis I should place on personal projects, grades, LeetCode, hackathons/coding challenges, job experiences, CCA involvement, etc.</h3><p>This is a hard question to answer because everyone is different. Some people are just born smart and don&#x27;t have to study much and still get their grades. Some people are just not cut out for studying, but are great at building impactful side projects. Know your comparative advantage and leverage it. Personally, I could probably do back end work if I tried hard enough but I just don&#x27;t enjoy doing it. I leverage my passion for design and attention to detail to build user interfaces and related tooling instead.</p><p>Strike a balance between breadth and depth. As undergrads, you can have a lot of room to explore and also relatively low stakes environment to fail. Take this chance to try out a lot of things, then choose what you really like and are good at. You can specialize after you have tried out enough things and know what you want and are good at. I&#x27;ve tried out back end, mobile, game development and prefer front end development the most.</p><p>By now you should know that not every investment reaps the same level of rewards. CCAs which aren&#x27;t related to CS can be fun, widen your social circle and improve your soft skills. If that&#x27;s important to you, by all means go ahead. But if you suck at programming, and spend all your spare time on random CCAs which doesn&#x27;t help you in your craft, then you&#x27;ll probably end up as a mediocre programmer. Back in school, I never really had an official CCA - I chose to do tutoring, work on open source stuff like NUSMods, and working as a boarding councillor at NUS High (sort of like RA but for NUS High Students), which gave me free accommodation near school). I liked the balance and diversity of the activities I had.</p><p>My CAP isn&#x27;t that high - got first class but not near 5.00. I reckon I could get A+ for every module if I really spent all my time studying, but studying isn&#x27;t exactly my favorite activity to do. I got my As usually from modules which were project-heavy. I value and enjoy the hands on experience more than the mugging experience.</p><p>I&#x27;m very lucky that Software Engineering exists so that there&#x27;s something meaningful which I can spend my time on, I enjoy doing, and also pays the bills.</p><h3>I want to learn as much as possible from you about topics that might benefit me as I&#x27;m graduating next year.</h3><p>DSA. No DSA mastery, no passing of interviews, no Facebook job offer.</p><hr/><p><strong><em>I am not a recruiter and I might have answered some of the recruiting or internship-related questions wrongly, so take them with a grain of salt. Opinions expressed are my own and do not represent the views of my employer.</em></strong></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Importance of Communicating Effectively as Engineers]]></title>
            <link>https://techinterviewhandbook.org/blog/importance-of-communicating-effectively-as-engineers</link>
            <guid>importance-of-communicating-effectively-as-engineers</guid>
            <pubDate>Mon, 12 Apr 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[_tl;dr: communicating effectively broadly and frequently helps you grow as an engineer and we have many tools built to do that!_]]></description>
        </item>
        <item>
            <title><![CDATA[Summing Root To Leaf Numbers]]></title>
            <link>https://techinterviewhandbook.org/blog/summing-root-to-leaf-numbers</link>
            <guid>summing-root-to-leaf-numbers</guid>
            <pubDate>Thu, 28 May 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Sum Root to Leaf Numbers is an interesting problem from LeetCode. The problem is of medium difficulty and is about binary trees. This post is an explains the solution to the problem.]]></description>
            <content:encoded><![CDATA[<p>Sum Root to Leaf Numbers is an <a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/">interesting problem from LeetCode</a>. The problem is of medium difficulty and is about binary trees. This post is an explains the solution to the problem.</p><p>I assume that you&#x27;re familiar with Python and the concept of binary trees. If you&#x27;re not, you can read <a href="https://www.tutorialspoint.com/python_data_structure/python_binary_tree.htm">this article</a> to get started.</p><p><img src="https://user-images.githubusercontent.com/29497717/82636662-b01b4b80-9c35-11ea-9ffa-e84b1e13c599.jpeg" alt="leetcode1"/></p><h2>The Problem</h2><p>Given a binary tree whose nodes contain values <code>0-9</code>, we have to find the sum of all numbers formed by root-to-leaf paths. A leaf is a node that doesn&#x27;t have any child nodes. <strong>In a binary tree, a root-to-leaf path is always unique</strong>. Here below is the expected behavior of the solution required:</p><p><img src="https://user-images.githubusercontent.com/29497717/82636816-0be5d480-9c36-11ea-8b2d-78bb36c865ee.jpeg" alt="leetcode2"/></p><p>In the tree on the left, the output is <code>25</code>. <code>25</code> is the sum of <code>12</code> and <code>13</code>, which are the two numbers formed when starting from <code>1</code> and visiting every leaf. In the tree on the right, the output is <code>1026</code> as it is the sum of the three numbers <code>495</code>, <code>491</code> and <code>40</code>.</p><h2>The Observations and Insights</h2><ol><li><p>To construct a number, we traverse the tree from the root to the leaf, appending digits where the most significant digit is at the root, and the least significant digit is at the leaf. We visit some leaves before other nodes that are closer to the root. This suggests that a depth-first search will be useful.</p></li><li><p>The <em>construction</em> of numbers is incremental and similar of sorts: the only difference between <code>495</code> and <code>491</code> (from the tree on the right) is the last digit. If we remove the <code>5</code> and insert a <code>1</code> in its place, we have the next required number. A number essentially comprises of the leaf&#x27;s digit appended to all the digits in ancestor nodes. Thus, numbers within the same subtree have common digits.</p></li><li><p>Finally, notice that this problem involves a tree, so a recursive solution is helpful.</p></li></ol><h2>The Solution</h2><p>We can do a <code>pre-order</code> traversal of the tree where we incrementally construct a number and exploit the fact that numbers formed by nodes in the same sub-tree have common digits. When we&#x27;re done forming numbers in a sub-tree, we can backtrack and go to another sub-tree.</p><p>Let&#x27;s create a <code>Solution</code> class to encompass our solution.</p><pre><code class="language-py">class Solution:
  def sum_numbers(self, root: TreeNode) -&gt; int:
</code></pre><p>The method signature given to us in the problem has one argument: root, which is of the type <code>TreeNode</code> . A <code>TreeNode</code> class is as follows (from LeetCode):</p><pre><code class="language-py">class TreeNode:
  def __init__(self, val=0, left=None, right=None):
    self.val = val
    self.left = left
    self.right = right
</code></pre><p>From observation #2, notice that appending a node&#x27;s digit to its ancestors can be achieved by <em>moving</em> all the digits of the number formed by ancestors to the right by 1 place and adding the current node&#x27;s digit. The digits can be <em>moved</em> by multiplying the number formed by ancestors by 10 (since we&#x27;re in base-10). For example:</p><p><code>495 = 49 x 10 + 5</code></p><p>Thus, we can keep track of the <em>current</em> digits in an integer. This is important because we won&#x27;t incur extra storage space for higher input sizes. We can pass around this value in the function parameter itself. Since the method signature given can only have one parameter, let&#x27;s create a <code>sum_root_to_leaf_helper</code> method.</p><p>We can think of the <code>sum_root_to_leaf_helper</code> method recursively and process each node differently based on whether or not it is a leaf.</p><ul><li><p>If the node is a leaf, we want to add its digit to our current digits by moving all the other digits to the right. We also want to return this value (since we&#x27;ll backtrack from here).</p></li><li><p>If it is not a leaf, we want to add the digit to our current digits by moving all the other digits to the right. We also want to continue constructing the number by traversing down this node&#x27;s left and right subtrees.</p></li></ul><p>If the current node is a <code>None</code>, we can simply return 0 because it doesn&#x27;t count.</p><p>Thus, our <code>sum_root_to_leaf_helper</code> method will be as follows:</p><pre><code class="language-py">def sum_root_to_leaf_helper(node, partial_sum=0):
  if not node:
    return 0
  partial_sum = partial_sum * 10 + node.val
  # Leaf
  if not node.left and not node.right:
    return partial_sum
  # Non Leaf
  return (sum_root_to_leaf_helper(node.left, partial_sum) + \
    sum_root_to_leaf_helper(node.right, partial_sum))
</code></pre><p>We use a default value for the partial sum to be 0.</p><p>In our main method, we want to include the <code>sum_root_to_leaf_helper</code> method as a nested method and simply pass on the node parameter. Finally, this is how our solution looks:</p><pre><code class="language-py">class Solution:
  def sumNumbers(self, root: TreeNode) -&gt; int:
    def sum_root_to_leaf_helper(node, partial_sum=0):
      if not node:
        return 0
      partial_sum = partial_sum * 10 + node.val
      # Leaf
      if not node.left and not node.right:
        return partial_sum
      # Non Leaf
      return (sum_root_to_leaf_helper(node.left, partial_sum) + \
        sum_root_to_leaf_helper(node.right, partial_sum))

    return sum_root_to_leaf_helper(root)
</code></pre><h2>The Algorithmic Complexity</h2><p>When we come up with a solution, it is important to analyze its algorithmic complexity not only to estimate its performance but also to identify areas for improvement and reflect on our problem-solving skills. We should always ask the question: <em>can we do better than X?</em> Where X is the current complexity of our solution.</p><p>Time:</p><p>Our solution is a modification of the depth-first-search pre-order traversal where we visit all nodes exactly once and perform a trivial computation (moving digits by integer multiplication). Thus, our runtime is simply <code>O(N)</code> where <code>N</code> represents the number of nodes in the given tree. A solution better than <code>O(N)</code> doesn&#x27;t seem possible because to construct a number from digits, we need to know all the digits (and thus visit all nodes).</p><p>Space:</p><p>In terms of storage, we incur a high cost in the recursion call stack that builds up as our <code>sum_root_to_leaf_helper</code> calls itself. These calls <em>build-up</em> as one waits for another to finish.</p><p>The maximum call stack is dependent upon the height of the binary tree (since we start backtracking after we visit a leaf), giving a complexity of <code>O(H)</code> where <code>H</code> is the height of the binary tree. In the worst case, the binary tree is skewed in either direction and thus <code>H = N</code>. Therefore, the worst-case space complexity is <code>O(N)</code>.</p><p>You can read <a href="https://www.freecodecamp.org/news/how-recursion-works-explained-with-flowcharts-and-a-video-de61f40cb7f9/">this article</a> to know more about recursion call stacks.</p><p>It is possible to do better than <code>O(N)</code> by using a Morris Preorder Traversal. The basic idea is to link a node and its predecessor temporarily. You can read more about it <a href="https://www.sciencedirect.com/science/article/abs/pii/0020019079900681">here</a>.</p><h2>The Conclusion</h2><p>I hope this post helped! Please do let me know if you have any feedback, comments or suggestions by responding to this post.</p><h2>Acknowledgements</h2><p>Advay, Kevin, Louie for reviewing this post and Yangshun for the idea of adding it as a blog post.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Are Front End Development Skills Enough for a Career?]]></title>
            <link>https://techinterviewhandbook.org/blog/are-front-end-development-skills-enough-for-a-career</link>
            <guid>are-front-end-development-skills-enough-for-a-career</guid>
            <pubDate>Sun, 03 Nov 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Recently, an undergrad freshmen I met at an event asked me a question regarding Front End development as a career.]]></description>
            <content:encoded><![CDATA[<head><link rel="canonical" href="https://yangshun.im/blog/are-front-end-development-skills-enough-for-a-career"/></head><p>Recently, an undergrad freshmen I met at an event asked me a question regarding Front End development as a career.</p><blockquote><p>I&#x27;m honestly quite into front end development — web technologies, UI/UX, web design and stuff. But with there being more and more accessible to new developers (create-react-app, parcel and such), I just can&#x27;t help but wonder if these skills are sufficient to survive in the tech industry today. Not that it&#x27;s a bad thing! Lowering the barrier to entry for programmers is always good. However, for those like myself who would like to pursue front end development as a career, I&#x27;m just wondering if having these skills are enough.</p></blockquote><p>Interesting question. I&#x27;ve wondered the same question to myself before but convinced myself that I&#x27;m probably fine just dabbling in Front End development for now. 😌</p><h2>Front End is complex and getting increasingly so</h2><p>Most people would have used websites like facebook.com, youtube.com and gmail.com. These applications have hundreds of engineers working on them (thousands if you include the back end) due to the demanding nature of the application - it has to load fast, it has to be secure, it has to look pretty. These days, front end development is no longer just about building websites rendering a static HTML. Many websites these days are in fact web applications and a lot of thought has to be put into the application architecture, and that requires good software engineering capabilities.</p><p>That&#x27;s why you see many Front End tools these days like React, Redux, Relay, CSS modules, webpack, etc. These tools exist because of the ever-increasing requirements of building rich and performant user experiences on the web. <a href="https://www.toptal.com/front-end/how-to-hire">Being a good Front End developer</a> is very hard, there are many aspects to know about - HTML, CSS, JavaScript, Browser APIs, Security, Performance, Animation, SEO, Networking, the list is non-exhaustive and growing. There are always new problems to solve and new things to learn. <a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4">JavaScript fatigue</a> was a term pretty common a few years back due to the explosion of tools in the Front End ecosystem. Things have gotten more stable but the JavaScript community is currently still one of the most fast-moving communities.</p><h2>Does the rise of mobile threaten the existence of web developers?</h2><p>Many products now have a native mobile app version and that might make people think that the existence of Front End (web) developers could be threatened. I think that is only true to a small extent. Certain applications like Uber and Lyft make sense to be mobile-first, but there are also many complex professional applications where web (or any interface with a larger screens) will always prevail, such as office productivity and design software. Viewing things at a more macro scale, both mobile apps and web apps fall under the category of client-side applications. Many core skills important for being a good web developer are also important for mobile app development - they are transferable across platforms.</p><p>Tools like <a href="https://reactnative.dev">React Native</a> and <a href="https://flutter.dev">Flutter</a> have also been created to help engineers build products across platforms by only writing the code &quot;once&quot; (in quotes because that dream is still in development). This approach is not a silver bullet solution and has yet to prove itself adequately, but for prototyping small apps or even just certain parts of your mobile app, it works pretty well. In React Native, you write your application in JavaScript using React Native primitives, and the React Native runtime runs the code on the JavaScript engine in the platform to construct native app UI views and handle application logic. It&#x27;s pretty similar to writing typical web front end code. Facebook&#x27;s Ads Manager App and the Marketplace tab are built using React Native. There are numerous technologies that enable you to build native apps on mobile platforms by knowing web front end development.</p><p>Even though mobile usage is on the rise, there still exists many use cases where the desktop still excels at. Google Suite, Microsoft Office, Design tools are still more efficiently operated on desktops. In fact, many desktop applications these days are built on HTML5 technologies instead of native desktop code using tools like Electron to package web application code into an executable shipped to users. You might already be using some of them without knowing - Slack, Discord, WhatsApp Desktop, VS Code, Atom Editor, just to name a few. I think developers who are only familiar with native desktop platform engineering skills have more reasons to worry than Front End developers.</p><p>The web is incredibly cross-platform!</p><h2>Jack of all trades, master of one</h2><p>However, I think that being a Front End development in many regards, is considered a specialized position. That&#x27;s why it&#x27;s important to be &quot;T-shaped&quot;. I first got introduced to this term through my ex-manager at Grab, Tim Goh. He advised me to have a specialization (front end), yet still know a bit about everything. In other words, you are strong in your core fundamentals, but you also specialize in a particular area.</p><p>This is good advice and it&#x27;s not new advice. In most university courses, students are expected to study the fundamental courses before choosing their area of specialization. In the context of a School of Computing in National University of Singapore, students start their in school by taking basic classes in Algorithms, Data Structures, Software Engineering, Operating Systems, Computer Networks, before choosing their specialization in deeper areas like Compilers, Computer Graphics, AI and Machine Learning, Media, Networking and more.</p><p>Having a strong foundation enables someone to make switching domains a possibility. There will definitely be a ramp-up process, but it can be made smoother with solid foundations, and with the skill of learning how to learn fast. In the extreme case where the web becomes irrelevant, and no companies want to hire front end developers anymore, front end developers with strong fundamentals can always slightly switch tracks by doing mobile or back end engineering, or even the hottest UI platform (AR/VR?) out there.</p><p>Having good tools to use (like Create React App, Parcel) doesn&#x27;t eradicate the need for Front End developers to possess good software engineering skills. What will happen if you are the person tasked to build the tools? Great Front End developers (or Software Engineers really) go beneath the abstractions layer, understand how their tools work, and what problems the tool set out to solve. They also constantly seek to challenge and improve the status quo by building better technologies to cater to the ever-increasing demands.</p><p>At Facebook, the Front End Engineers are Software Engineers first, domain experts second. Many of the Front End engineers I know at Facebook have a deep understanding of the technical stack and don&#x27;t just work on stuff related to the browser. At Facebook scale, front end work also involves building a lot of infrastructure to make our front end code base scale well with the growing technical and people needs. That means writing <a href="https://github.com/facebook/jscodeshift">codemods</a> to do large-scale refactoring, inventing new <a href="https://reactjs.org">UI</a> <a href="http://facebook.github.io/flux/">paradigms</a>, performant <a href="https://jestjs.io">testing frameworks</a>, creating <a href="https://flow.org">type-checkers</a> for untyped languages, changing the ways we <a href="https://graphql.org">fetch data</a> from our servers and <a href="https://relay.dev">managing it on clients</a>. These tools wouldn&#x27;t exist if the Front End engineers at Facebook didn&#x27;t possess strong software engineering skills.</p><h2>Pick up new, relevant skills</h2><p>It can be hard to pick up new skills at work in an unrelated domain if there are no opportunities to do so. Thankfully (or not), due to the explosion of tools in the Front End ecosystem, I&#x27;ve found an area which I have gained a new-found interest in - Programming Languages Theory (Static Analysis, Compilers, and Intepreters). Static analysis is incredibly important in tools that I use on a daily basis - it&#x27;s being used by the module bundlers for bundling JavaScript files together, generating CSS from more user-friendly CSS syntaxes, compiling modern JavaScript into older versions of JavaScript that more common browsers can run, and even this blog post written in Markdown uses static analysis to be converted into HTML.</p><p>I&#x27;ve been toying with writing my own interpreter after learning this awesome book called <a href="http://www.craftinginterpreters.com">Crafting Interpreters</a> and will be further exploring this domain in my spare time, possibly building Front End-related tooling in future that leverages static analysis and compilation.</p><p>Adding new skills to my arsenal in a related but different domain helps me to stay relevant in the event that the industry no longer needs Front End developers 😱</p><hr/><p>In summary, although Front End development is considered quite specialized, there&#x27;s enough demand and complexity for it to stay relevant in the years to come. What would threaten the web would be an entire shift of the way users interact with apps, perhaps to a non-visual paradigm like a brain-controlled interface. However, paradigm shifts don&#x27;t happen overnight and there will be sufficient time to react (pun intended) in the case that ever happens. Being strong in your Software Engineering fundamentals and knowing how to learn new skills fast will help you in switching domains (and also careers).</p><p><em>Opinions are my own and do not represent the views of my employer.</em></p>]]></content:encoded>
        </item>
    </channel>
</rss>